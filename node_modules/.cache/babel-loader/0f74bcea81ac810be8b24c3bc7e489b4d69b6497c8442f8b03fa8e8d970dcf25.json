{"ast":null,"code":"/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nfunction diff_match_patch() {\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n}\n\n//  DIFF FUNCTIONS\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/** @typedef {{0: number, 1: string}} */\ndiff_match_patch.Diff;\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function (text1, text2, opt_checklines, opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = new Date().getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function (text1, text2, checklines, deadline) {\n  var diffs;\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function (text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var a = this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n          pointer = pointer + a.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop(); // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function (text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = delta % 2 != 0;\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if (new Date().getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function (text1, text2, x, y, deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n  return diffs.concat(diffsb);\n};\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function (text1, text2) {\n  var lineArray = []; // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {}; // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== undefined) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n    return chars;\n  }\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {\n    chars1: chars1,\n    chars2: chars2,\n    lineArray: lineArray\n  };\n};\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function (diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join('');\n  }\n};\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function (text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function (text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0; // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastequality && lastequality.length <= Math.max(length_insertions1, length_deletions1) && lastequality.length <= Math.max(length_insertions2, length_deletions2)) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0; // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE && diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] = deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function (diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 && char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 && char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 && char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 && char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 && one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 && two.match(diff_match_patch.blanklineStartRegex_);\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0; // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost && (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = null;\n      }\n      post_ins = post_del = false;\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastequality && (pre_ins && pre_del && post_ins && post_del || lastequality.length < this.Diff_EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3)) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--; // Throw away the equality we just deleted;\n        lastequality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--; // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function (diffs) {\n  diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function (diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {\n      // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {\n      // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function (diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0]; // Operation (insert, delete, equal)\n    var data = diffs[x][1]; // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;').replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function (diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function (diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function (diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function (diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function (text1, delta) {\n  var diffs = [];\n  var diffsLength = 0; // Keeping our own length var is faster in JS.\n  var pointer = 0; // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n      // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' + tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer + ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n//  MATCH FUNCTIONS\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function (text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function (text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + proximity / dmp.Match_Distance;\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << pattern.length - 1;\n  best_loc = -1;\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {\n        // First pass: exact match.\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        // Subsequent passes: fuzzy match.\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function (pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  }\n  return s;\n};\n\n//  PATCH FUNCTIONS\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function (patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1, patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function (a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' && typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */a;\n    diffs = this.diff_main(text1, /** @type {string} */opt_b, true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' && typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */a;\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' && typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */a;\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */opt_b;\n  } else if (typeof a == 'string' && typeof opt_b == 'string' && opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */a;\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */opt_c;\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n  if (diffs.length === 0) {\n    return []; // Get rid of the null case.\n  }\n\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0; // Keeping our own length var is faster in JS.\n  var char_count1 = 0; // Number of characters into the text1 string.\n  var char_count2 = 0; // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text + postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) + postpatch_text.substring(char_count2 + diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin && patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n  return patches;\n};\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function (patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] = patch.diffs[y].slice();\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function (patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits), expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text, text1.substring(text1.length - this.Match_MaxBits), expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) + this.diff_text2(patches[x].diffs) + text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits && this.diff_levenshtein(diffs) / text1.length > this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {\n              // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] + text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              // Deletion\n              text = text.substring(0, start_loc + index2) + text.substring(start_loc + this.diff_xIndex(diffs, index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function (patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength; // Should be 0.\n    patch.start2 -= paddingLength; // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n  return nullPadding;\n};\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function (patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push([DIFF_EQUAL, precontext]);\n      }\n      while (bigpatch.diffs.length !== 0 && patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 && patch.diffs[0][0] == DIFF_EQUAL && diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push([diff_type, diff_text]);\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0, patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diff_type, diff_text]);\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext = precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs).substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postcontext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function (patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function (textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push([DIFF_DELETE, line]);\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push([DIFF_INSERT, line]);\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push([DIFF_EQUAL, line]);\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function () {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n/**\n * Emmulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indicies are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function () {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = this.start1 + 1 + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = this.start2 + 1 + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","map":{"version":3,"names":["diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","length","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","text","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","seed","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastequality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","op","data","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","matchmask","bin_min","bin_mid","bin_max","last_rd","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","slice","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","expected_loc","start_loc","end_loc","index1","index2","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","coords1","coords2","module","exports"],"sources":["C:/Users/nithi/Desktop/Python_IDE-main/node_modules/diff-match-patch/index.js"],"sourcesContent":["/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nfunction diff_match_patch() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n}\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/** @typedef {{0: number, 1: string}} */\ndiff_match_patch.Diff;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var a = this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n          pointer = pointer + a.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n    return chars;\n  }\n\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastequality && (lastequality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastequality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastequality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastequality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] = patch.diffs[y].slice();\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push([DIFF_EQUAL, precontext]);\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push([diff_type, diff_text]);\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diff_type, diff_text]);\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postcontext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push([DIFF_DELETE, line]);\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push([DIFF_INSERT, line]);\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push([DIFF_EQUAL, line]);\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emmulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indicies are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}