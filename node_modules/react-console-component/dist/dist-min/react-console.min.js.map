{"version":3,"sources":["webpack:///react-console.min.js","webpack:///webpack/bootstrap 7da4ed7b3ce2514e3323","webpack:///./react-console.tsx","webpack:///external \"React\""],"names":["Console","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__extends","this","d","b","__","constructor","hasOwnProperty","prototype","Object","create","React","ConsolePrompt","_super","apply","arguments","child","updateSemaphore","componentDidMount","idle","componentDidUpdate","_this","cursor","className","window","setTimeout","renderValue","props","point","value","length","createElement","ref","key","substring","render","label","argument","idx","lastIndexOf","defaultProps","Component","ConsoleMessage","type","map","val","JSON","stringify","join","default_1","log","messages","_i","state","message","push","setState","scrollIfBottom","logX","acceptInput","currLabel","nextLabel","focus","getSelection","toString","typer","scrollToBottom","blur","keyDown","e","keyCodes","13","acceptLine","37","backwardChar","39","forwardChar","38","previousHistory","40","nextHistory","8","backwardDeleteChar","46","deleteChar","35","endOfLine","36","beginningOfLine","9","complete","27","prefixMeta","ctrlCodes","65","69","70","66","80","78","82","reverseSearchHistory","83","forwardSearchHistory","68","75","killLine","85","backwardKillLine","89","yank","67","cancelCommand","metaCodes","forwardWord","backwardWord","nonIncrementalReverseSearchHistory","nonIncrementalForwardSearchHistory","190","yankLastArg","killWord","backwardKillWord","yankPop","metaShiftCodes","188","beginningOfHistory","endOfHistory","189","metaCtrlCodes","yankNthArg","altKey","ctrlKey","keyCode","preventDefault","shiftKey","change","insert","replace","lastCommand","searchText","searchInit","textInsert","triggerSearch","assign","consoleInsert","paste","clipboardData","getData","promptText","movePoint","nextWord","previousWord","command_1","history_1","history","command","restoreText","historyn","handler","rotateHistory","searchDirection","searchHistory","historySearchBackward","historySearchForward","historySubstringSearchBackward","historySubstringSearchForward","kill","unshift","killn","killWholeLine","rotateRing","words","split","curr","completions","i","cancel","text","n","max","pos","ringn","ring","circular","direction","next","inc","entry","indexOf","scrollSemaphore","container","scrollTop","scrollHeight","offsetHeight","scrollIfBottomTrue","rect","getBoundingClientRect","top","left","bottom","innerHeight","document","documentElement","clientHeight","right","innerWidth","clientWidth","scrollIntoView","promptLabel","autofocus","search","exec","index","onClick","welcomeMessage","concat","style","overflow","height","width","autoComplete","autoCorrect","autoCapitalize","spellCheck","outline","color","backgroundColor","border","resize","onBlur","onKeyDown","onChange","onPaste","continue","defineProperty"],"mappings":"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","file":"react-console.min.js","sourcesContent":["var Console =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar React = __webpack_require__(2);\n\t__webpack_require__(1);\n\tvar ConsolePrompt = (function (_super) {\n\t    __extends(ConsolePrompt, _super);\n\t    function ConsolePrompt() {\n\t        _super.apply(this, arguments);\n\t        this.child = {};\n\t        // DOM Management\n\t        this.updateSemaphore = 0;\n\t    }\n\t    // Component Lifecycle\n\t    ConsolePrompt.prototype.componentDidMount = function () {\n\t        this.idle();\n\t    };\n\t    ConsolePrompt.prototype.componentDidUpdate = function () {\n\t        this.idle();\n\t    };\n\t    ConsolePrompt.prototype.idle = function () {\n\t        var _this = this;\n\t        // Blink cursor when idle\n\t        if (this.child.cursor) {\n\t            if (this.updateSemaphore == 0) {\n\t                this.child.cursor.className = \"react-console-cursor\";\n\t            }\n\t            this.updateSemaphore++;\n\t            window.setTimeout(function () {\n\t                _this.updateSemaphore--;\n\t                if (_this.updateSemaphore == 0 && _this.child.cursor) {\n\t                    _this.child.cursor.className = \"react-console-cursor react-console-cursor-idle\";\n\t                }\n\t            }, 1000);\n\t        }\n\t    };\n\t    ConsolePrompt.prototype.renderValue = function () {\n\t        var _this = this;\n\t        if (this.props.point < 0) {\n\t            return [this.props.value];\n\t        }\n\t        else if (this.props.point == this.props.value.length) {\n\t            return [this.props.value, React.createElement(\"span\", {ref: function (ref) { return _this.child.cursor = ref; }, key: \"cursor\", className: \"react-console-cursor\"}, \" \")];\n\t        }\n\t        else {\n\t            return [this.props.value.substring(0, this.props.point),\n\t                React.createElement(\"span\", {ref: function (ref) { return _this.child.cursor = ref; }, key: \"cursor\", className: \"react-console-cursor\"}, this.props.value.substring(this.props.point, this.props.point + 1)),\n\t                this.props.value.substring(this.props.point + 1)];\n\t        }\n\t    };\n\t    ConsolePrompt.prototype.render = function () {\n\t        var label = this.props.label;\n\t        if (this.props.argument) {\n\t            var idx = label.lastIndexOf(\"\\n\");\n\t            if (idx >= 0) {\n\t                label = label.substring(0, idx + 1);\n\t            }\n\t            else {\n\t                label = '';\n\t            }\n\t        }\n\t        return React.createElement(\"div\", {className: \"react-console-prompt-box\"}, React.createElement(\"span\", {className: \"react-console-prompt-label\"}, label), React.createElement(\"span\", {className: \"react-console-prompt-argument\"}, this.props.argument), React.createElement(\"span\", {className: \"react-console-prompt\"}, this.renderValue()));\n\t    };\n\t    ConsolePrompt.defaultProps = {\n\t        point: -1,\n\t        value: \"\",\n\t        label: \"> \",\n\t        argument: null,\n\t    };\n\t    return ConsolePrompt;\n\t}(React.Component));\n\tvar ConsoleMessage = function (props) {\n\t    return React.createElement(\"div\", {className: \"react-console-message\" + (props.type ? \" react-console-message-\" + props.type : \"\")}, props.value.map(function (val) {\n\t        if (typeof val == 'string') {\n\t            return val;\n\t        }\n\t        else {\n\t            return JSON.stringify(val);\n\t        }\n\t    }).join(\"\\n\"));\n\t};\n\tConsoleMessage.defaultProps = {\n\t    type: null,\n\t    value: [],\n\t};\n\t;\n\t;\n\tvar default_1 = (function (_super) {\n\t    __extends(default_1, _super);\n\t    function default_1(props) {\n\t        var _this = this;\n\t        _super.call(this, props);\n\t        this.child = {};\n\t        // Command API\n\t        this.log = function () {\n\t            var messages = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                messages[_i - 0] = arguments[_i];\n\t            }\n\t            var log = _this.state.log;\n\t            log[_this.state.log.length - 1].message.push({ value: messages });\n\t            _this.setState({\n\t                log: log,\n\t            }, _this.scrollIfBottom());\n\t        };\n\t        this.logX = function (type) {\n\t            var messages = [];\n\t            for (var _i = 1; _i < arguments.length; _i++) {\n\t                messages[_i - 1] = arguments[_i];\n\t            }\n\t            var log = _this.state.log;\n\t            log[_this.state.log.length - 1].message.push({ type: type, value: messages });\n\t            _this.setState({\n\t                log: log,\n\t            }, _this.scrollIfBottom());\n\t        };\n\t        this.return = function () {\n\t            _this.setState({\n\t                acceptInput: true,\n\t                currLabel: _this.nextLabel(),\n\t            }, _this.scrollIfBottom());\n\t        };\n\t        // Event Handlers\n\t        this.focus = function () {\n\t            if (!window.getSelection().toString()) {\n\t                _this.child.typer.focus();\n\t                _this.setState({ focus: true }, _this.scrollToBottom);\n\t            }\n\t        };\n\t        this.blur = function () {\n\t            _this.setState({ focus: false });\n\t        };\n\t        this.keyDown = function (e) {\n\t            var keyCodes = {\n\t                // return\n\t                13: _this.acceptLine,\n\t                // left\n\t                37: _this.backwardChar,\n\t                // right\n\t                39: _this.forwardChar,\n\t                // up\n\t                38: _this.previousHistory,\n\t                // down\n\t                40: _this.nextHistory,\n\t                // backspace\n\t                8: _this.backwardDeleteChar,\n\t                // delete\n\t                46: _this.deleteChar,\n\t                // end\n\t                35: _this.endOfLine,\n\t                // start\n\t                36: _this.beginningOfLine,\n\t                // tab\n\t                9: _this.complete,\n\t                // esc\n\t                27: _this.prefixMeta,\n\t            };\n\t            var ctrlCodes = {\n\t                // C-a\n\t                65: _this.beginningOfLine,\n\t                // C-e\n\t                69: _this.endOfLine,\n\t                // C-f\n\t                70: _this.forwardChar,\n\t                // C-b\n\t                66: _this.backwardChar,\n\t                // C-l TODO\n\t                //76: this.clearScreen,\n\t                // C-p\n\t                80: _this.previousHistory,\n\t                // C-n\n\t                78: _this.nextHistory,\n\t                // C-r\n\t                82: _this.reverseSearchHistory,\n\t                // C-s\n\t                83: _this.forwardSearchHistory,\n\t                // C-d\n\t                68: _this.deleteChar,\n\t                // C-q TODO\n\t                //81: this.quotedInsert,\n\t                // C-v TODO\n\t                //86: this.quotedInsert,\n\t                // C-t TODO\n\t                //84: this.transposeChars,\n\t                // C-k\n\t                75: _this.killLine,\n\t                // C-u\n\t                85: _this.backwardKillLine,\n\t                // C-y TODO\n\t                89: _this.yank,\n\t                // C-c\n\t                67: _this.cancelCommand,\n\t            };\n\t            var ctrlXCodes = {\n\t                // C-x Rubout\n\t                8: _this.backwardKillLine,\n\t            };\n\t            var ctrlShiftCodes = {};\n\t            var metaCodes = {\n\t                // M-f\n\t                70: _this.forwardWord,\n\t                // M-b\n\t                66: _this.backwardWord,\n\t                // M-p\n\t                80: _this.nonIncrementalReverseSearchHistory,\n\t                // M-n\n\t                78: _this.nonIncrementalForwardSearchHistory,\n\t                // M-.\n\t                190: _this.yankLastArg,\n\t                // M-TAB TODO\n\t                //9: this.tabInsert,\n\t                // M-t TODO\n\t                //84: this.transposeWords,\n\t                // M-u TODO\n\t                //85: this.upcaseWord,\n\t                // M-l TODO\n\t                //76: this.downcaseWord,\n\t                // M-c TODO\n\t                //67: this.capitalizeWord,\n\t                // M-d\n\t                68: _this.killWord,\n\t                // M-backspace\n\t                8: _this.backwardKillWord,\n\t                // M-w TODO\n\t                //87: this.unixWordRubout,\n\t                // M-\\ TODO\n\t                //220: this.deleteHorizontalSpace,\n\t                // M-y\n\t                89: _this.yankPop,\n\t            };\n\t            var metaShiftCodes = {\n\t                // M-<\n\t                188: _this.beginningOfHistory,\n\t                // M->\n\t                190: _this.endOfHistory,\n\t                // M-_\n\t                189: _this.yankLastArg,\n\t            };\n\t            var metaCtrlCodes = {\n\t                // M-C-y\n\t                89: _this.yankNthArg,\n\t            };\n\t            if (_this.state.acceptInput) {\n\t                if (e.altKey) {\n\t                    if (e.ctrlKey) {\n\t                        if (e.keyCode in metaCtrlCodes) {\n\t                            metaCtrlCodes[e.keyCode]();\n\t                            e.preventDefault();\n\t                        }\n\t                    }\n\t                    else if (e.shiftKey) {\n\t                        if (e.keyCode in metaShiftCodes) {\n\t                            metaShiftCodes[e.keyCode]();\n\t                            e.preventDefault();\n\t                        }\n\t                    }\n\t                    else if (e.keyCode in metaCodes) {\n\t                        metaCodes[e.keyCode]();\n\t                        e.preventDefault();\n\t                    }\n\t                    e.preventDefault();\n\t                }\n\t                else if (e.ctrlKey) {\n\t                    if (e.keyCode in ctrlCodes) {\n\t                        ctrlCodes[e.keyCode]();\n\t                        e.preventDefault();\n\t                    }\n\t                    e.preventDefault();\n\t                }\n\t                else if (e.keyCode in keyCodes) {\n\t                    keyCodes[e.keyCode]();\n\t                    e.preventDefault();\n\t                }\n\t            }\n\t        };\n\t        this.change = function () {\n\t            var idx = 0;\n\t            for (; idx < _this.state.typer.length && idx < _this.child.typer.value.length; idx++) {\n\t                if (_this.state.typer[idx] != _this.child.typer.value[idx]) {\n\t                    break;\n\t                }\n\t            }\n\t            var insert = _this.child.typer.value.substring(idx);\n\t            var replace = _this.state.typer.length - idx;\n\t            if (_this.state.lastCommand == 1 /* Search */) {\n\t                _this.setState({\n\t                    searchText: _this.state.searchInit ? insert : _this.textInsert(insert, _this.state.searchText, replace),\n\t                    typer: _this.child.typer.value,\n\t                }, _this.triggerSearch);\n\t            }\n\t            else {\n\t                _this.setState(Object.assign(_this.consoleInsert(insert, replace), {\n\t                    typer: _this.child.typer.value,\n\t                    lastCommand: 0 /* Default */,\n\t                }), _this.scrollToBottom);\n\t            }\n\t        };\n\t        this.paste = function (e) {\n\t            var insert = e.clipboardData.getData('text');\n\t            if (_this.state.lastCommand == 1 /* Search */) {\n\t                _this.setState({\n\t                    searchText: _this.state.searchInit ? insert : _this.textInsert(insert, _this.state.searchText),\n\t                    typer: _this.child.typer.value,\n\t                }, _this.triggerSearch);\n\t            }\n\t            else {\n\t                _this.setState(Object.assign(_this.consoleInsert(insert), {\n\t                    lastCommand: 0 /* Default */,\n\t                }), _this.scrollToBottom);\n\t            }\n\t            e.preventDefault();\n\t        };\n\t        // Commands for Moving\n\t        this.beginningOfLine = function () {\n\t            _this.setState({\n\t                point: 0,\n\t                argument: null,\n\t                lastCommand: 0 /* Default */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        this.endOfLine = function () {\n\t            _this.setState({\n\t                point: _this.state.promptText.length,\n\t                argument: null,\n\t                lastCommand: 0 /* Default */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        this.forwardChar = function () {\n\t            _this.setState({\n\t                point: _this.movePoint(1),\n\t                argument: null,\n\t                lastCommand: 0 /* Default */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        this.backwardChar = function () {\n\t            _this.setState({\n\t                point: _this.movePoint(-1),\n\t                argument: null,\n\t                lastCommand: 0 /* Default */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        this.forwardWord = function () {\n\t            _this.setState({\n\t                point: _this.nextWord(),\n\t                argument: null,\n\t                lastCommand: 0 /* Default */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        this.backwardWord = function () {\n\t            _this.setState({\n\t                point: _this.previousWord(),\n\t                argument: null,\n\t                lastCommand: 0 /* Default */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        // Commands for Manipulating the History\n\t        this.acceptLine = function () {\n\t            _this.child.typer.value = \"\";\n\t            if (_this.props.continue(_this.state.promptText)) {\n\t                _this.setState(Object.assign(_this.consoleInsert(\"\\n\"), {\n\t                    typer: \"\",\n\t                    lastCommand: 0 /* Default */,\n\t                }), _this.scrollToBottom);\n\t            }\n\t            else {\n\t                var command_1 = _this.state.promptText;\n\t                var history_1 = _this.state.history;\n\t                var log = _this.state.log;\n\t                if (!history_1 || history_1[history_1.length - 1] != command_1) {\n\t                    history_1.push(command_1);\n\t                }\n\t                log.push({\n\t                    label: _this.state.currLabel,\n\t                    command: command_1,\n\t                    message: []\n\t                });\n\t                _this.setState({\n\t                    acceptInput: false,\n\t                    typer: \"\",\n\t                    point: 0,\n\t                    promptText: \"\",\n\t                    restoreText: \"\",\n\t                    log: log,\n\t                    history: history_1,\n\t                    historyn: 0,\n\t                    argument: null,\n\t                    lastCommand: 0 /* Default */,\n\t                }, function () {\n\t                    _this.scrollToBottom();\n\t                    _this.props.handler(command_1);\n\t                });\n\t            }\n\t        };\n\t        this.previousHistory = function () {\n\t            _this.rotateHistory(-1);\n\t        };\n\t        this.nextHistory = function () {\n\t            _this.rotateHistory(1);\n\t        };\n\t        this.beginningOfHistory = function () {\n\t            _this.rotateHistory(-_this.state.history.length);\n\t        };\n\t        this.endOfHistory = function () {\n\t            _this.rotateHistory(_this.state.history.length);\n\t        };\n\t        this.triggerSearch = function () {\n\t            if (_this.state.searchDirection == 0 /* Reverse */) {\n\t                _this.reverseSearchHistory();\n\t            }\n\t            else {\n\t                _this.forwardSearchHistory();\n\t            }\n\t        };\n\t        this.reverseSearchHistory = function () {\n\t            if (_this.state.lastCommand == 1 /* Search */) {\n\t                _this.setState(Object.assign(_this.searchHistory(0 /* Reverse */, true), {\n\t                    argument: \"(reverse-i-search)`\" + _this.state.searchText + \"': \",\n\t                    lastCommand: 1 /* Search */,\n\t                }), _this.scrollToBottom);\n\t            }\n\t            else {\n\t                _this.setState({\n\t                    searchDirection: 0 /* Reverse */,\n\t                    searchInit: true,\n\t                    argument: \"(reverse-i-search)`': \",\n\t                    lastCommand: 1 /* Search */,\n\t                }, _this.scrollToBottom);\n\t            }\n\t        };\n\t        this.forwardSearchHistory = function () {\n\t            if (_this.state.lastCommand == 1 /* Search */) {\n\t                _this.setState(Object.assign(_this.searchHistory(1 /* Forward */, true), {\n\t                    argument: \"(forward-i-search)`\" + _this.state.searchText + \"': \",\n\t                    lastCommand: 1 /* Search */,\n\t                }), _this.scrollToBottom);\n\t            }\n\t            else {\n\t                _this.setState({\n\t                    searchDirection: 1 /* Forward */,\n\t                    searchInit: true,\n\t                    argument: \"(forward-i-search)`': \",\n\t                    lastCommand: 1 /* Search */,\n\t                }, _this.scrollToBottom);\n\t            }\n\t        };\n\t        this.nonIncrementalReverseSearchHistory = function () {\n\t            // TODO\n\t        };\n\t        this.nonIncrementalForwardSearchHistory = function () {\n\t            // TODO\n\t        };\n\t        this.historySearchBackward = function () {\n\t            // TODO\n\t        };\n\t        this.historySearchForward = function () {\n\t            // TODO\n\t        };\n\t        this.historySubstringSearchBackward = function () {\n\t            // TODO\n\t        };\n\t        this.historySubstringSearchForward = function () {\n\t            // TODO\n\t        };\n\t        this.yankNthArg = function () {\n\t            // TODO\n\t        };\n\t        this.yankLastArg = function () {\n\t            // TODO\n\t        };\n\t        // Commands for Changing Text\n\t        this.deleteChar = function () {\n\t            if (_this.state.point < _this.state.promptText.length) {\n\t                _this.setState({\n\t                    promptText: _this.state.promptText.substring(0, _this.state.point)\n\t                        + _this.state.promptText.substring(_this.state.point + 1),\n\t                    argument: null,\n\t                    lastCommand: 0 /* Default */,\n\t                }, _this.scrollToBottom);\n\t            }\n\t        };\n\t        this.backwardDeleteChar = function () {\n\t            if (_this.state.lastCommand == 1 /* Search */) {\n\t                _this.setState({\n\t                    searchText: _this.state.searchText.substring(0, _this.state.searchText.length - 1),\n\t                    typer: _this.child.typer.value,\n\t                }, _this.triggerSearch);\n\t            }\n\t            else if (_this.state.point > 0) {\n\t                _this.setState({\n\t                    point: _this.movePoint(-1),\n\t                    promptText: _this.state.promptText.substring(0, _this.state.point - 1)\n\t                        + _this.state.promptText.substring(_this.state.point),\n\t                    argument: null,\n\t                    lastCommand: 0 /* Default */,\n\t                }, _this.scrollToBottom);\n\t            }\n\t        };\n\t        // Killing and Yanking\n\t        this.killLine = function () {\n\t            var kill = _this.state.kill;\n\t            if (_this.state.lastCommand == 2 /* Kill */) {\n\t                kill[0] = kill[0] + _this.state.promptText.substring(_this.state.point);\n\t            }\n\t            else {\n\t                kill.unshift(_this.state.promptText.substring(_this.state.point));\n\t            }\n\t            _this.setState({\n\t                promptText: _this.state.promptText.substring(0, _this.state.point),\n\t                kill: kill,\n\t                killn: 0,\n\t                argument: null,\n\t                lastCommand: 2 /* Kill */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        this.backwardKillLine = function () {\n\t            var kill = _this.state.kill;\n\t            if (_this.state.lastCommand == 2 /* Kill */) {\n\t                kill[0] = _this.state.promptText.substring(0, _this.state.point) + kill[0];\n\t            }\n\t            else {\n\t                kill.unshift(_this.state.promptText.substring(0, _this.state.point));\n\t            }\n\t            _this.setState({\n\t                point: 0,\n\t                promptText: _this.state.promptText.substring(_this.state.point),\n\t                kill: kill,\n\t                killn: 0,\n\t                argument: null,\n\t                lastCommand: 2 /* Kill */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        this.killWholeLine = function () {\n\t            var kill = _this.state.kill;\n\t            if (_this.state.lastCommand == 2 /* Kill */) {\n\t                kill[0] = _this.state.promptText.substring(0, _this.state.point)\n\t                    + kill[0] + _this.state.promptText.substring(_this.state.point);\n\t            }\n\t            else {\n\t                kill.unshift(_this.state.promptText);\n\t            }\n\t            _this.setState({\n\t                point: 0,\n\t                promptText: '',\n\t                kill: kill,\n\t                killn: 0,\n\t                argument: null,\n\t                lastCommand: 2 /* Kill */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        this.killWord = function () {\n\t            var kill = _this.state.kill;\n\t            if (_this.state.lastCommand == 2 /* Kill */) {\n\t                kill[0] = kill[0] + _this.state.promptText.substring(_this.state.point, _this.nextWord());\n\t            }\n\t            else {\n\t                kill.unshift(_this.state.promptText.substring(_this.state.point, _this.nextWord()));\n\t            }\n\t            _this.setState({\n\t                promptText: _this.state.promptText.substring(0, _this.state.point)\n\t                    + _this.state.promptText.substring(_this.nextWord()),\n\t                kill: kill,\n\t                killn: 0,\n\t                argument: null,\n\t                lastCommand: 2 /* Kill */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        this.backwardKillWord = function () {\n\t            var kill = _this.state.kill;\n\t            if (_this.state.lastCommand == 2 /* Kill */) {\n\t                kill[0] = _this.state.promptText.substring(_this.previousWord(), _this.state.point) + kill[0];\n\t            }\n\t            else {\n\t                kill.unshift(_this.state.promptText.substring(_this.previousWord(), _this.state.point));\n\t            }\n\t            _this.setState({\n\t                point: _this.previousWord(),\n\t                promptText: _this.state.promptText.substring(0, _this.previousWord())\n\t                    + _this.state.promptText.substring(_this.state.point),\n\t                kill: kill,\n\t                killn: 0,\n\t                argument: null,\n\t                lastCommand: 2 /* Kill */,\n\t            }, _this.scrollToBottom);\n\t        };\n\t        this.yank = function () {\n\t            _this.setState(Object.assign(_this.consoleInsert(_this.state.kill[_this.state.killn]), {\n\t                lastCommand: 3 /* Yank */,\n\t            }), _this.scrollToBottom);\n\t        };\n\t        this.yankPop = function () {\n\t            if (_this.state.lastCommand == 3 /* Yank */) {\n\t                var killn = _this.rotateRing(1, _this.state.killn, _this.state.kill.length);\n\t                _this.setState(Object.assign(_this.consoleInsert(_this.state.kill[killn], _this.state.kill[_this.state.killn].length), {\n\t                    killn: killn,\n\t                    lastCommand: 3 /* Yank */,\n\t                }), _this.scrollToBottom);\n\t            }\n\t        };\n\t        // Numeric Arguments\n\t        // Completing\n\t        this.complete = function () {\n\t            if (_this.props.complete) {\n\t                // Split text and find current word\n\t                var words = _this.state.promptText.split(\" \");\n\t                var curr = 0;\n\t                var idx = words[0].length;\n\t                while (idx < _this.state.point && curr + 1 < words.length) {\n\t                    idx += words[++curr].length + 1;\n\t                }\n\t                var completions = _this.props.complete(words, curr, _this.state.promptText);\n\t                if (completions.length == 1) {\n\t                    // Perform completion\n\t                    words[curr] = completions[0];\n\t                    var point = -1;\n\t                    for (var i = 0; i <= curr; i++) {\n\t                        point += words[i].length + 1;\n\t                    }\n\t                    _this.setState({\n\t                        point: point,\n\t                        promptText: words.join(\" \"),\n\t                        argument: null,\n\t                        lastCommand: 0 /* Default */,\n\t                    }, _this.scrollToBottom);\n\t                }\n\t                else if (completions.length > 1) {\n\t                    // show completions\n\t                    var log = _this.state.log;\n\t                    log.push({\n\t                        label: _this.state.currLabel,\n\t                        command: _this.state.promptText,\n\t                        message: [{\n\t                                type: \"completion\",\n\t                                value: [completions.join(\"\\t\")],\n\t                            }]\n\t                    });\n\t                    _this.setState({\n\t                        currLabel: _this.nextLabel(),\n\t                        log: log,\n\t                        argument: null,\n\t                        lastCommand: 0 /* Default */,\n\t                    }, _this.scrollToBottom);\n\t                }\n\t            }\n\t        };\n\t        // Keyboard Macros\n\t        // Miscellaneous\n\t        this.prefixMeta = function () {\n\t            if (_this.state.lastCommand == 1 /* Search */) {\n\t                _this.setState({\n\t                    argument: null,\n\t                    lastCommand: 0 /* Default */,\n\t                });\n\t            }\n\t            // TODO Meta prefixed state\n\t        };\n\t        this.cancelCommand = function () {\n\t            if (_this.state.acceptInput) {\n\t                _this.child.typer.value = \"\";\n\t                var log = _this.state.log;\n\t                log.push({\n\t                    label: _this.state.currLabel,\n\t                    command: _this.state.promptText,\n\t                    message: []\n\t                });\n\t                _this.setState({\n\t                    typer: \"\",\n\t                    point: 0,\n\t                    promptText: \"\",\n\t                    restoreText: \"\",\n\t                    log: log,\n\t                    historyn: 0,\n\t                    argument: null,\n\t                    lastCommand: 0 /* Default */,\n\t                }, _this.scrollToBottom);\n\t            }\n\t            else {\n\t                _this.props.cancel();\n\t            }\n\t        };\n\t        // Helper functions\n\t        this.textInsert = function (insert, text, replace, point) {\n\t            if (replace === void 0) { replace = 0; }\n\t            if (point === void 0) { point = text.length; }\n\t            return text.substring(0, point - replace) + insert + text.substring(point);\n\t        };\n\t        this.consoleInsert = function (insert, replace) {\n\t            if (replace === void 0) { replace = 0; }\n\t            var promptText = _this.textInsert(insert, _this.state.promptText, replace, _this.state.point);\n\t            return {\n\t                point: _this.movePoint(insert.length - replace, insert.length - replace + _this.state.promptText.length),\n\t                promptText: promptText,\n\t                restoreText: promptText,\n\t                argument: null,\n\t                lastCommand: 0 /* Default */,\n\t            };\n\t        };\n\t        this.movePoint = function (n, max) {\n\t            if (max === void 0) { max = _this.state.promptText.length; }\n\t            var pos = _this.state.point + n;\n\t            if (pos < 0) {\n\t                return 0;\n\t            }\n\t            if (pos > max) {\n\t                return max;\n\t            }\n\t            else {\n\t                return pos;\n\t            }\n\t        };\n\t        this.rotateRing = function (n, ringn, ring, circular) {\n\t            if (circular === void 0) { circular = true; }\n\t            if (ring == 0)\n\t                return 0;\n\t            if (circular) {\n\t                return (ring + (ringn + n) % ring) % ring;\n\t            }\n\t            else {\n\t                ringn = ringn - n;\n\t                if (ringn < 0) {\n\t                    return 0;\n\t                }\n\t                else if (ringn >= ring) {\n\t                    return ring;\n\t                }\n\t                else {\n\t                    return ringn;\n\t                }\n\t            }\n\t        };\n\t        this.rotateHistory = function (n) {\n\t            var historyn = _this.rotateRing(n, _this.state.historyn, _this.state.history.length, false);\n\t            if (historyn == 0) {\n\t                _this.setState({\n\t                    point: _this.state.restoreText.length,\n\t                    promptText: _this.state.restoreText,\n\t                    historyn: historyn,\n\t                    argument: null,\n\t                    lastCommand: 0 /* Default */,\n\t                }, _this.scrollToBottom);\n\t            }\n\t            else {\n\t                var promptText = _this.state.history[_this.state.history.length - historyn];\n\t                _this.setState({\n\t                    point: promptText.length,\n\t                    promptText: promptText,\n\t                    historyn: historyn,\n\t                    argument: null,\n\t                    lastCommand: 0 /* Default */,\n\t                }, _this.scrollToBottom);\n\t            }\n\t        };\n\t        this.searchHistory = function (direction, next) {\n\t            if (direction === void 0) { direction = _this.state.searchDirection; }\n\t            if (next === void 0) { next = false; }\n\t            var idx = _this.state.historyn;\n\t            var inc = (direction == 0 /* Reverse */) ? 1 : -1;\n\t            if (next) {\n\t                idx = idx + inc;\n\t            }\n\t            for (; idx > 0 && idx <= _this.state.history.length; idx = idx + inc) {\n\t                var entry = _this.state.history[_this.state.history.length - idx];\n\t                var point = entry.indexOf(_this.state.searchText);\n\t                if (point > -1) {\n\t                    return {\n\t                        point: point,\n\t                        promptText: entry,\n\t                        searchDirection: direction,\n\t                        searchInit: false,\n\t                        historyn: idx,\n\t                    };\n\t                }\n\t            }\n\t            return {\n\t                searchDirection: direction,\n\t                searchInit: false,\n\t            };\n\t        };\n\t        // DOM management\n\t        this.scrollSemaphore = 0;\n\t        this.scrollIfBottom = function () {\n\t            if (_this.scrollSemaphore > 0 || _this.child.container.scrollTop == _this.child.container.scrollHeight - _this.child.container.offsetHeight) {\n\t                _this.scrollSemaphore++;\n\t                return _this.scrollIfBottomTrue;\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        };\n\t        this.scrollIfBottomTrue = function () {\n\t            _this.scrollToBottom();\n\t            _this.scrollSemaphore--;\n\t        };\n\t        this.scrollToBottom = function () {\n\t            _this.child.container.scrollTop = _this.child.container.scrollHeight;\n\t            var rect = _this.child.focus.getBoundingClientRect();\n\t            if (rect.top < 0 || rect.left < 0 ||\n\t                rect.bottom > (window.innerHeight || document.documentElement.clientHeight) ||\n\t                rect.right > (window.innerWidth || document.documentElement.clientWidth)) {\n\t                _this.child.typer.scrollIntoView(false);\n\t            }\n\t        };\n\t        this.nextLabel = function () {\n\t            if (typeof _this.props.promptLabel === \"string\") {\n\t                return _this.props.promptLabel;\n\t            }\n\t            else {\n\t                return _this.props.promptLabel();\n\t            }\n\t        };\n\t        this.state = {\n\t            focus: false,\n\t            acceptInput: true,\n\t            typer: '',\n\t            point: 0,\n\t            currLabel: this.nextLabel(),\n\t            promptText: '',\n\t            restoreText: '',\n\t            searchText: '',\n\t            searchDirection: null,\n\t            searchInit: false,\n\t            log: [],\n\t            history: [],\n\t            historyn: 0,\n\t            kill: [],\n\t            killn: 0,\n\t            argument: null,\n\t            lastCommand: 0 /* Default */,\n\t        };\n\t    }\n\t    // Component Lifecycle\n\t    default_1.prototype.componentDidMount = function () {\n\t        if (this.props.autofocus) {\n\t            this.focus();\n\t        }\n\t    };\n\t    default_1.prototype.nextWord = function () {\n\t        // Find first alphanumeric char after first non-alphanumeric char\n\t        var search = /\\W\\w/.exec(this.state.promptText.substring(this.state.point));\n\t        if (search) {\n\t            return search.index + this.state.point + 1;\n\t        }\n\t        else {\n\t            return this.state.promptText.length;\n\t        }\n\t    };\n\t    default_1.prototype.previousWord = function () {\n\t        // Find first non-alphanumeric char after first alphanumeric char in reverse\n\t        var search = /\\W\\w(?!.*\\W\\w)/.exec(this.state.promptText.substring(0, this.state.point - 1));\n\t        if (search) {\n\t            return search.index + 1;\n\t        }\n\t        else {\n\t            return 0;\n\t        }\n\t    };\n\t    default_1.prototype.render = function () {\n\t        var _this = this;\n\t        return React.createElement(\"div\", {ref: function (ref) { return _this.child.container = ref; }, className: \"react-console-container \" + (this.state.focus ? \"react-console-focus\" : \"react-console-nofocus\"), onClick: this.focus}, this.props.welcomeMessage ?\n\t            React.createElement(\"div\", {className: \"react-console-message react-console-welcome\"}, this.props.welcomeMessage)\n\t            : null, this.state.log.map(function (val) {\n\t            return [\n\t                React.createElement(ConsolePrompt, {label: val.label, value: val.command})\n\t            ].concat(val.message.map(function (val, idx) {\n\t                return React.createElement(ConsoleMessage, {key: idx, type: val.type, value: val.value});\n\t            }));\n\t        }), this.state.acceptInput ?\n\t            React.createElement(ConsolePrompt, {label: this.state.currLabel, value: this.state.promptText, point: this.state.point, argument: this.state.argument})\n\t            : null, React.createElement(\"div\", {style: { overflow: \"hidden\", height: 1, width: 1 }}, React.createElement(\"textarea\", {ref: function (ref) { return _this.child.typer = ref; }, className: \"react-console-typer\", autoComplete: \"off\", autoCorrect: \"off\", autoCapitalize: \"off\", spellCheck: \"false\", style: { outline: \"none\",\n\t            color: \"transparent\",\n\t            backgroundColor: \"transparent\",\n\t            border: \"none\",\n\t            resize: \"none\",\n\t            overflow: \"hidden\",\n\t        }, onBlur: this.blur, onKeyDown: this.keyDown, onChange: this.change, onPaste: this.paste})), React.createElement(\"div\", {ref: function (ref) { return _this.child.focus = ref; }}, \" \"));\n\t    };\n\t    default_1.defaultProps = {\n\t        promptLabel: '> ',\n\t        continue: function () { return false; },\n\t        cancel: function () { },\n\t    };\n\t    return default_1;\n\t}(React.Component));\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = default_1;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = React;\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** react-console.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7da4ed7b3ce2514e3323\n **/","\"use strict\";\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './react-console.scss';\n\ninterface ConsolePromptProps {\n\tpoint?: number;\n\tvalue: string;\n\tlabel: string;\n\targument?: string;\n}\nclass ConsolePrompt extends React.Component<ConsolePromptProps,{}> {\n\tstatic defaultProps: ConsolePromptProps = {\n\t\tpoint: -1,\n\t\tvalue: \"\",\n\t\tlabel: \"> \",\n\t\targument: null,\n\t}\n\tchild: {\n\t\tcursor?: Element;\n\t} = {};\n\t// Component Lifecycle\n\tcomponentDidMount() {\n\t\tthis.idle();\n\t}\n\tcomponentDidUpdate() {\n\t\tthis.idle();\n\t}\n\t// DOM Management\n\tupdateSemaphore: number = 0;\n\tidle() {\n\t\t// Blink cursor when idle\n\t\tif(this.child.cursor) {\n\t\t\tif(this.updateSemaphore == 0) {\n\t\t\t\tthis.child.cursor.className = \"react-console-cursor\";\n\t\t\t}\n\t\t\tthis.updateSemaphore++;\n\t\t\twindow.setTimeout( () => {\n\t\t\t\tthis.updateSemaphore--;\n\t\t\t\tif(this.updateSemaphore == 0 && this.child.cursor) {\n\t\t\t\t\tthis.child.cursor.className = \"react-console-cursor react-console-cursor-idle\";\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t}\n\t}\n\trenderValue() {\n\t\tif(this.props.point < 0) {\n\t\t\treturn [this.props.value];\n\t\t} else if (this.props.point == this.props.value.length) {\n\t\t\treturn [this.props.value,<span ref={ref => this.child.cursor = ref} key=\"cursor\" className=\"react-console-cursor\">&nbsp;</span>];\n\t\t} else {\n\t\t\treturn [this.props.value.substring(0,this.props.point),\n\t\t\t\t<span ref={ref => this.child.cursor = ref} key=\"cursor\" className=\"react-console-cursor\">{this.props.value.substring(this.props.point,this.props.point+1)}</span>,\n\t\t\t\tthis.props.value.substring(this.props.point+1)];\n\t\t}\n\t}\n\trender() {\n\t\tlet label = this.props.label;\n\t\tif(this.props.argument) {\n\t\t\tlet idx = label.lastIndexOf(\"\\n\");\n\t\t\tif(idx >= 0) {\n\t\t\t\tlabel = label.substring(0, idx+1);\n\t\t\t} else {\n\t\t\t\tlabel = '';\n\t\t\t}\n\t\t}\n\t\treturn <div className=\"react-console-prompt-box\">\n\t\t\t<span className=\"react-console-prompt-label\">{ label }</span>\n\t\t\t<span className=\"react-console-prompt-argument\">{ this.props.argument }</span>\n\t\t\t<span className=\"react-console-prompt\">{ this.renderValue() }</span>\n\t\t</div>;\n\t}\n}\n\ninterface ConsoleMessageProps {\n\ttype?: string;\n\tvalue: any[];\n}\nlet ConsoleMessage: React.SFC<ConsoleMessageProps> = function(props: ConsoleMessageProps) {\n\treturn <div className={\"react-console-message\" + (props.type?\" react-console-message-\"+props.type:\"\")}>\n\t\t{props.value.map((val: any)=>{\n\t\t\tif(typeof val == 'string') {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn JSON.stringify(val);\n\t\t\t}\n\t\t}).join(\"\\n\")}\n\t</div>;\n}\nConsoleMessage.defaultProps = {\n\ttype: null,\n\tvalue: [],\n}\n\nexport interface LogMessage {\n\ttype?: string;\n\tvalue: any[];\n}\nexport interface LogEntry {\n\tlabel: string;\n\tcommand: string;\n\tmessage: LogMessage[];\n}\n\nexport interface ConsoleProps{\n\thandler(command: string): any;\n\tcancel?(): any;\n\tcomplete?(words: string[], curr: number, promptText: string): string[];\n\tcontinue?(promptText: string): boolean;\n\tautofocus?: boolean;\n\tpromptLabel?: string | (()=>string);\n\twelcomeMessage?: string;\n}\nexport const enum ConsoleCommand {\n\tDefault,\n\tSearch,\n\tKill,\n\tYank,\n};\nexport const enum SearchDirection {\n\tReverse,\n\tForward,\n}\nexport interface ConsoleState{\n\tfocus?: boolean;\n\tacceptInput?: boolean;\n\ttyper?: string;\n\tpoint?: number;\n\tcurrLabel?: string;\n\tpromptText?: string;\n\trestoreText?: string;\n\tsearchText?: string;\n\tsearchDirection?: SearchDirection;\n\tsearchInit?: boolean;\n\tlog?: LogEntry[];\n\thistory?: string[];\n\thistoryn?: number;\n\tkill?: string[];\n\tkilln?: number;\n\targument?: string;\n\tlastCommand?: ConsoleCommand;\n};\nexport default class extends React.Component<ConsoleProps,ConsoleState> {\n\tconstructor(props: ConsoleProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfocus: false,\n\t\t\tacceptInput: true,\n\t\t\ttyper: '',\n\t\t\tpoint: 0,\n\t\t\tcurrLabel: this.nextLabel(),\n\t\t\tpromptText: '',\n\t\t\trestoreText: '',\n\t\t\tsearchText: '',\n\t\t\tsearchDirection: null,\n\t\t\tsearchInit: false,\n\t\t\tlog: [],\n\t\t\thistory: [],\n\t\t\thistoryn: 0,\n\t\t\tkill: [],\n\t\t\tkilln: 0,\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t};\n\t}\n\tstatic defaultProps = {\n\t\tpromptLabel: '> ',\n\t\tcontinue: function() { return false; },\n\t\tcancel: function() {},\n\t};\n\tchild: {\n\t\ttyper?: HTMLTextAreaElement;\n\t\tcontainer?: HTMLElement;\n\t\tfocus?: HTMLElement;\n\t} = {};\n\t// Command API\n\tlog = (...messages: any[]) => {\n\t\tlet log = this.state.log;\n\t\tlog[this.state.log.length-1].message.push({value: messages});\n\t\tthis.setState({\n\t\t\tlog: log,\n\t\t}, this.scrollIfBottom() );\n\t}\n\tlogX = (type: string, ...messages: any[]) => {\n\t\tlet log = this.state.log;\n\t\tlog[this.state.log.length-1].message.push({type: type, value: messages});\n\t\tthis.setState({\n\t\t\tlog: log,\n\t\t}, this.scrollIfBottom() );\n\t}\n\treturn = () => {\n\t\tthis.setState({\n\t\t\tacceptInput: true,\n\t\t\tcurrLabel: this.nextLabel(),\n\t\t}, this.scrollIfBottom() );\n\t}\n\t// Component Lifecycle\n\tcomponentDidMount() {\n\t\tif(this.props.autofocus) {\n\t\t\tthis.focus();\n\t\t}\n\t}\n\t// Event Handlers\n\tfocus = () => {\n\t\tif(!window.getSelection().toString()) {\n\t\t\tthis.child.typer.focus();\n\t\t\tthis.setState({ focus: true }, this.scrollToBottom );\n\t\t}\n\t}\n\tblur = () => {\n\t\tthis.setState({ focus: false });\n\t}\n\tkeyDown = (e: KeyboardEvent) => {\n\t\tinterface keyMap {\n\t\t\t[key: number]: ()=>void\n\t\t}\n\t\tlet keyCodes: keyMap = {\n\t\t\t// return\n\t\t\t13: this.acceptLine,\n\t\t\t// left\n\t\t\t37: this.backwardChar,\n\t\t\t// right\n\t\t\t39: this.forwardChar,\n\t\t\t// up\n\t\t\t38: this.previousHistory,\n\t\t\t// down\n\t\t\t40: this.nextHistory,\n\t\t\t// backspace\n\t\t\t8:  this.backwardDeleteChar,\n\t\t\t// delete\n\t\t\t46: this.deleteChar,\n\t\t\t// end\n\t\t\t35: this.endOfLine,\n\t\t\t// start\n\t\t\t36: this.beginningOfLine,\n\t\t\t// tab\n\t\t\t9: this.complete,\n\t\t\t// esc\n\t\t\t27: this.prefixMeta,\n\t\t};\n\t\tvar ctrlCodes: keyMap = {\n\t\t\t// C-a\n\t\t\t65: this.beginningOfLine,\n\t\t\t// C-e\n\t\t\t69: this.endOfLine,\n\t\t\t// C-f\n\t\t\t70: this.forwardChar,\n\t\t\t// C-b\n\t\t\t66: this.backwardChar,\n\t\t\t// C-l TODO\n\t\t\t//76: this.clearScreen,\n\t\t\t// C-p\n\t\t\t80: this.previousHistory,\n\t\t\t// C-n\n\t\t\t78: this.nextHistory,\n\t\t\t// C-r\n\t\t\t82: this.reverseSearchHistory,\n\t\t\t// C-s\n\t\t\t83: this.forwardSearchHistory,\n\t\t\t// C-d\n\t\t\t68: this.deleteChar, // TODO EOF\n\t\t\t// C-q TODO\n\t\t\t//81: this.quotedInsert,\n\t\t\t// C-v TODO\n\t\t\t//86: this.quotedInsert,\n\t\t\t// C-t TODO\n\t\t\t//84: this.transposeChars,\n\t\t\t// C-k\n\t\t\t75: this.killLine,\n\t\t\t// C-u\n\t\t\t85: this.backwardKillLine,\n\t\t\t// C-y TODO\n\t\t\t89: this.yank,\n\t\t\t// C-c\n\t\t\t67: this.cancelCommand,\n\t\t\t// C-w TODO\n\t\t\t//87: this.killPreviousWhitespace,\n\t\t\t// C-] TODO\n\t\t\t//221: this.characterSearch,\n\t\t\t// C-x TODO\n\t\t\t//88: this.prefixCtrlX,\n\t\t};\n\t\tvar ctrlXCodes: keyMap = { // TODO state\n\t\t\t// C-x Rubout\n\t\t\t8: this.backwardKillLine,\n\t\t\t// C-x ( TODO\n\t\t\t//57: this.startKbdMacro,\n\t\t\t// C-x ) TODO\n\t\t\t//48: this.endKbdMacro,\n\t\t\t// C-x e TODO\n\t\t\t//69: this.callLastKbdMacro,\n\t\t\t// C-x C-u TODO\n\t\t\t//85: this.undo,\n\t\t\t// C-x C-x TODO\n\t\t\t//88: this.exchangePointAndMark,\n\t\t};\n\t\tvar ctrlShiftCodes: keyMap = {\n\t\t\t// C-_ TODO\n\t\t\t//189: this.undo,\n\t\t\t// C-@ TODO\n\t\t\t//50: this.setMark,\n\t\t};\n\t\tvar metaCodes: keyMap = {\n\t\t\t// M-f\n\t\t\t70: this.forwardWord,\n\t\t\t// M-b\n\t\t\t66: this.backwardWord,\n\t\t\t// M-p\n\t\t\t80: this.nonIncrementalReverseSearchHistory,\n\t\t\t// M-n\n\t\t\t78: this.nonIncrementalForwardSearchHistory,\n\t\t\t// M-.\n\t\t\t190: this.yankLastArg,\n\t\t\t// M-TAB TODO\n\t\t\t//9: this.tabInsert,\n\t\t\t// M-t TODO\n\t\t\t//84: this.transposeWords,\n\t\t\t// M-u TODO\n\t\t\t//85: this.upcaseWord,\n\t\t\t// M-l TODO\n\t\t\t//76: this.downcaseWord,\n\t\t\t// M-c TODO\n\t\t\t//67: this.capitalizeWord,\n\t\t\t// M-d\n\t\t\t68: this.killWord,\n\t\t\t// M-backspace\n\t\t\t8: this.backwardKillWord,\n\t\t\t// M-w TODO\n\t\t\t//87: this.unixWordRubout,\n\t\t\t// M-\\ TODO\n\t\t\t//220: this.deleteHorizontalSpace,\n\t\t\t// M-y\n\t\t\t89: this.yankPop,\n\t\t\t// M-0 TODO\n\t\t\t//48: () => this.digitArgument(0),\n\t\t\t// M-1 TODO\n\t\t\t//49: () => this.digitArgument(1),\n\t\t\t// M-2 TODO\n\t\t\t//50: () => this.digitArgument(2),\n\t\t\t// M-3 TODO\n\t\t\t//51: () => this.digitArgument(3),\n\t\t\t// M-4 TODO\n\t\t\t//52: () => this.digitArgument(4),\n\t\t\t// M-5 TODO\n\t\t\t//53: () => this.digitArgument(5),\n\t\t\t// M-6 TODO\n\t\t\t//54: () => this.digitArgument(6),\n\t\t\t// M-7 TODO\n\t\t\t//55: () => this.digitArgument(7),\n\t\t\t// M-8 TODO\n\t\t\t//56: () => this.digitArgument(8),\n\t\t\t// M-9 TODO\n\t\t\t//57: () => this.digitArgument(9),\n\t\t\t// M-- TODO\n\t\t\t//189: () => this.digitArgument('-'),\n\t\t\t// M-f TODO\n\t\t\t//71: () => this.abort,\n\t\t\t// M-r TODO\n\t\t\t//82: this.revertLine,\n\t\t\t// M-SPACE TODO\n\t\t\t//32: this.setMark,\n\t\t};\n\t\tvar metaShiftCodes: keyMap = { // TODO hook in\n\t\t\t// M-<\n\t\t\t188: this.beginningOfHistory,\n\t\t\t// M->\n\t\t\t190: this.endOfHistory,\n\t\t\t// M-_\n\t\t\t189: this.yankLastArg,\n\t\t\t// M-? TODO\n\t\t\t//191: this.possibleCompletions,\n\t\t\t// M-* TODO\n\t\t\t//56: this.insertCompletions,\n\t\t}\n\t\tvar metaCtrlCodes: keyMap = {\n\t\t\t// M-C-y\n\t\t\t89: this.yankNthArg,\n\t\t\t// M-C-] TODO\n\t\t\t//221: this.characterSearchBackward,\n\t\t\t// M-C-j TODO !!!\n\t\t\t//74: this.viEditingMode,\n\t\t};\n\t\tif(this.state.acceptInput) {\n\t\t\tif (e.altKey) {\n\t\t\t\tif (e.ctrlKey) {\n\t\t\t\t\tif (e.keyCode in metaCtrlCodes) {\n\t\t\t\t\t\tmetaCtrlCodes[e.keyCode]();\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t} else if (e.shiftKey) {\n\t\t\t\t\tif (e.keyCode in metaShiftCodes) {\n\t\t\t\t\t\tmetaShiftCodes[e.keyCode]();\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t} else if (e.keyCode in metaCodes) {\n\t\t\t\t\tmetaCodes[e.keyCode]();\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t\te.preventDefault();\n\t\t\t} else if (e.ctrlKey) {\n\t\t\t\tif (e.keyCode in ctrlCodes) {\n\t\t\t\t\tctrlCodes[e.keyCode]();\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t\te.preventDefault();\n\t\t\t} else if (e.keyCode in keyCodes) {\n\t\t\t\tkeyCodes[e.keyCode]();\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t}\n\t}\n\tchange = () => {\n\t\tlet idx = 0;\n\t\tfor(;idx < this.state.typer.length && idx < this.child.typer.value.length; idx++) {\n\t\t\tif(this.state.typer[idx] != this.child.typer.value[idx]) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tlet insert = this.child.typer.value.substring(idx);\n\t\tlet replace = this.state.typer.length - idx;\n\t\tif(this.state.lastCommand == ConsoleCommand.Search) {\n\t\t\tthis.setState({\n\t\t\t\tsearchText: this.state.searchInit?insert:this.textInsert(insert, this.state.searchText, replace),\n\t\t\t\ttyper: this.child.typer.value,\n\t\t\t}, this.triggerSearch );\n\t\t} else {\n\t\t\tthis.setState(Object.assign(\n\t\t\t\tthis.consoleInsert(insert, replace),{\n\t\t\t\t\ttyper: this.child.typer.value,\n\t\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t\t}), this.scrollToBottom\n\t\t\t);\n\t\t}\n\t}\n\tpaste = (e: ClipboardEvent) => {\n\t\tlet insert = e.clipboardData.getData('text');\n\t\tif(this.state.lastCommand == ConsoleCommand.Search) {\n\t\t\tthis.setState({\n\t\t\t\tsearchText: this.state.searchInit?insert:this.textInsert(insert, this.state.searchText),\n\t\t\t\ttyper: this.child.typer.value,\n\t\t\t}, this.triggerSearch );\n\t\t} else {\n\t\t\tthis.setState(Object.assign(\n\t\t\t\tthis.consoleInsert(insert),{\n\t\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t\t}), this.scrollToBottom\n\t\t\t);\n\t\t}\n\t\te.preventDefault();\n\t}\n\t// Commands for Moving\n\tbeginningOfLine = () => {\n\t\tthis.setState({\n\t\t\tpoint: 0,\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t}, this.scrollToBottom);\n\t}\n\tendOfLine = () => {\n\t\tthis.setState({\n\t\t\tpoint: this.state.promptText.length,\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t}, this.scrollToBottom);\n\t}\n\tforwardChar = () => {\n\t\tthis.setState({\n\t\t\tpoint: this.movePoint(1),\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t}, this.scrollToBottom);\n\t}\n\tbackwardChar = () => {\n\t\tthis.setState({\n\t\t\tpoint: this.movePoint(-1),\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t}, this.scrollToBottom);\n\t}\n\tforwardWord = () => {\n\t\tthis.setState({\n\t\t\tpoint: this.nextWord(),\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t}, this.scrollToBottom);\n\t}\n\tbackwardWord = () => {\n\t\tthis.setState({\n\t\t\tpoint: this.previousWord(),\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t}, this.scrollToBottom);\n\t}\n\t// Commands for Manipulating the History\n\tacceptLine = () => {\n\t\tthis.child.typer.value = \"\";\n\t\tif(this.props.continue(this.state.promptText)) {\n\t\t\tthis.setState(Object.assign(\n\t\t\t\tthis.consoleInsert(\"\\n\"),{\n\t\t\t\t\ttyper: \"\",\n\t\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t\t}), this.scrollToBottom\n\t\t\t);\n\t\t} else {\n\t\t\tlet command = this.state.promptText;\n\t\t\tlet history = this.state.history;\n\t\t\tlet log = this.state.log;\n\t\t\tif(!history || history[history.length-1] != command) {\n\t\t\t\thistory.push(command);\n\t\t\t}\n\t\t\tlog.push({\n\t\t\t\tlabel: this.state.currLabel,\n\t\t\t\tcommand: command,\n\t\t\t\tmessage: []\n\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\tacceptInput: false,\n\t\t\t\ttyper: \"\",\n\t\t\t\tpoint: 0,\n\t\t\t\tpromptText: \"\",\n\t\t\t\trestoreText: \"\",\n\t\t\t\tlog: log,\n\t\t\t\thistory: history,\n\t\t\t\thistoryn: 0,\n\t\t\t\targument: null,\n\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t}, () => {\n\t\t\t\tthis.scrollToBottom();\n\t\t\t\tthis.props.handler(command);\n\t\t\t});\n\t\t}\n\t}\n\tpreviousHistory = () => {\n\t\tthis.rotateHistory(-1);\n\t}\n\tnextHistory = () => {\n\t\tthis.rotateHistory(1);\n\t}\n\tbeginningOfHistory = () => {\n\t\tthis.rotateHistory(-this.state.history.length);\n\t}\n\tendOfHistory = () => {\n\t\tthis.rotateHistory(this.state.history.length);\n\t}\n\ttriggerSearch = () => {\n\t\tif(this.state.searchDirection == SearchDirection.Reverse) {\n\t\t\tthis.reverseSearchHistory();\n\t\t} else {\n\t\t\tthis.forwardSearchHistory();\n\t\t}\n\t}\n\treverseSearchHistory = () => {\n\t\tif(this.state.lastCommand == ConsoleCommand.Search) {\n\t\t\tthis.setState(Object.assign(\n\t\t\t\tthis.searchHistory(SearchDirection.Reverse, true),{\n\t\t\t\t\targument: `(reverse-i-search)\\`${this.state.searchText}': `,\n\t\t\t\t\tlastCommand: ConsoleCommand.Search,\n\t\t\t\t}), this.scrollToBottom\n\t\t\t);\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tsearchDirection: SearchDirection.Reverse,\n\t\t\t\tsearchInit: true,\n\t\t\t\targument: `(reverse-i-search)\\`': `,\n\t\t\t\tlastCommand: ConsoleCommand.Search,\n\t\t\t}, this.scrollToBottom);\n\t\t}\n\t}\n\tforwardSearchHistory = () => {\n\t\tif(this.state.lastCommand == ConsoleCommand.Search) {\n\t\t\tthis.setState(Object.assign(\n\t\t\t\tthis.searchHistory(SearchDirection.Forward, true),{\n\t\t\t\t\targument: `(forward-i-search)\\`${this.state.searchText}': `,\n\t\t\t\t\tlastCommand: ConsoleCommand.Search,\n\t\t\t\t}), this.scrollToBottom\n\t\t\t);\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tsearchDirection: SearchDirection.Forward,\n\t\t\t\tsearchInit: true,\n\t\t\t\targument: `(forward-i-search)\\`': `,\n\t\t\t\tlastCommand: ConsoleCommand.Search,\n\t\t\t}, this.scrollToBottom);\n\t\t}\n\t}\n\tnonIncrementalReverseSearchHistory = () => {\n\t\t// TODO\n\t}\n\tnonIncrementalForwardSearchHistory = () => {\n\t\t// TODO\n\t}\n\thistorySearchBackward = () => {\n\t\t// TODO\n\t}\n\thistorySearchForward = () => {\n\t\t// TODO\n\t}\n\thistorySubstringSearchBackward = () => {\n\t\t// TODO\n\t}\n\thistorySubstringSearchForward = () => {\n\t\t// TODO\n\t}\n\tyankNthArg = () => {\n\t\t// TODO\n\t}\n\tyankLastArg = () => {\n\t\t// TODO\n\t}\n\t// Commands for Changing Text\n\tdeleteChar = () => {\n\t\tif(this.state.point < this.state.promptText.length) {\n\t\t\tthis.setState({\n\t\t\t\tpromptText: this.state.promptText.substring(0,this.state.point)\n\t\t\t\t\t+ this.state.promptText.substring(this.state.point+1),\n\t\t\t\targument: null,\n\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t}, this.scrollToBottom);\n\t\t}\n\t}\n\tbackwardDeleteChar = () => {\n\t\tif(this.state.lastCommand == ConsoleCommand.Search) {\n\t\t\tthis.setState({\n\t\t\t\tsearchText: this.state.searchText.substring(0,this.state.searchText.length-1),\n\t\t\t\ttyper: this.child.typer.value,\n\t\t\t}, this.triggerSearch );\n\t\t} else if(this.state.point > 0) {\n\t\t\tthis.setState({\n\t\t\t\tpoint: this.movePoint(-1),\n\t\t\t\tpromptText: this.state.promptText.substring(0,this.state.point-1)\n\t\t\t\t\t+ this.state.promptText.substring(this.state.point),\n\t\t\t\targument: null,\n\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t}, this.scrollToBottom);\n\t\t}\n\t}\n\t// Killing and Yanking\n\tkillLine = () => {\n\t\tlet kill = this.state.kill;\n\t\tif(this.state.lastCommand == ConsoleCommand.Kill) {\n\t\t\tkill[0] = kill[0] + this.state.promptText.substring(this.state.point);\n\t\t} else {\n\t\t\tkill.unshift(this.state.promptText.substring(this.state.point));\n\t\t}\n\t\tthis.setState({\n\t\t\tpromptText: this.state.promptText.substring(0,this.state.point),\n\t\t\tkill: kill,\n\t\t\tkilln: 0,\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Kill,\n\t\t}, this.scrollToBottom);\n\t}\n\tbackwardKillLine = () => {\n\t\tlet kill = this.state.kill;\n\t\tif(this.state.lastCommand == ConsoleCommand.Kill) {\n\t\t\tkill[0] = this.state.promptText.substring(0,this.state.point) + kill[0];\n\t\t} else {\n\t\t\tkill.unshift(this.state.promptText.substring(0,this.state.point));\n\t\t}\n\t\tthis.setState({\n\t\t\tpoint: 0,\n\t\t\tpromptText: this.state.promptText.substring(this.state.point),\n\t\t\tkill: kill,\n\t\t\tkilln: 0,\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Kill,\n\t\t}, this.scrollToBottom);\n\t}\n\tkillWholeLine = () => {\n\t\tlet kill = this.state.kill;\n\t\tif(this.state.lastCommand == ConsoleCommand.Kill) {\n\t\t\tkill[0] = this.state.promptText.substring(0,this.state.point)\n\t\t\t\t+ kill[0] + this.state.promptText.substring(this.state.point);\n\t\t} else {\n\t\t\tkill.unshift(this.state.promptText);\n\t\t}\n\t\tthis.setState({\n\t\t\tpoint: 0,\n\t\t\tpromptText: '',\n\t\t\tkill: kill,\n\t\t\tkilln: 0,\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Kill,\n\t\t}, this.scrollToBottom);\n\t}\n\tkillWord = () => {\n\t\tlet kill = this.state.kill;\n\t\tif(this.state.lastCommand == ConsoleCommand.Kill) {\n\t\t\tkill[0] = kill[0] + this.state.promptText.substring(this.state.point,this.nextWord());\n\t\t} else {\n\t\t\tkill.unshift(this.state.promptText.substring(this.state.point,this.nextWord()));\n\t\t}\n\t\tthis.setState({\n\t\t\tpromptText: this.state.promptText.substring(0,this.state.point)\n\t\t\t\t+ this.state.promptText.substring(this.nextWord()),\n\t\t\tkill: kill,\n\t\t\tkilln: 0,\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Kill,\n\t\t}, this.scrollToBottom);\n\t}\n\tbackwardKillWord = () => {\n\t\tlet kill = this.state.kill;\n\t\tif(this.state.lastCommand == ConsoleCommand.Kill) {\n\t\t\tkill[0] = this.state.promptText.substring(this.previousWord(),this.state.point) + kill[0];\n\t\t} else {\n\t\t\tkill.unshift(this.state.promptText.substring(this.previousWord(),this.state.point));\n\t\t}\n\t\tthis.setState({\n\t\t\tpoint: this.previousWord(),\n\t\t\tpromptText: this.state.promptText.substring(0,this.previousWord())\n\t\t\t\t+ this.state.promptText.substring(this.state.point),\n\t\t\tkill: kill,\n\t\t\tkilln: 0,\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Kill,\n\t\t}, this.scrollToBottom);\n\t}\n\tyank = () => {\n\t\tthis.setState(Object.assign(\n\t\t\tthis.consoleInsert(this.state.kill[this.state.killn]),{\n\t\t\t\tlastCommand: ConsoleCommand.Yank,\n\t\t\t}), this.scrollToBottom\n\t\t);\n\t}\n\tyankPop = () => {\n\t\tif(this.state.lastCommand == ConsoleCommand.Yank) {\n\t\t\tlet killn = this.rotateRing(1, this.state.killn, this.state.kill.length);\n\t\t\tthis.setState(Object.assign(\n\t\t\t\tthis.consoleInsert(this.state.kill[killn], this.state.kill[this.state.killn].length),{\n\t\t\t\t\tkilln: killn,\n\t\t\t\t\tlastCommand: ConsoleCommand.Yank,\n\t\t\t\t}), this.scrollToBottom\n\t\t\t);\n\t\t}\n\t}\n\t// Numeric Arguments\n\t// Completing\n\tcomplete = () => {\n\t\tif(this.props.complete) {\n\t\t\t// Split text and find current word\n\t\t\tlet words = this.state.promptText.split(\" \");\n\t\t\tlet curr = 0;\n\t\t\tlet idx = words[0].length;\n\t\t\twhile(idx < this.state.point && curr + 1 < words.length) {\n\t\t\t\tidx += words[++curr].length + 1;\n\t\t\t}\n\n\t\t\tlet completions = this.props.complete(words, curr, this.state.promptText);\n\t\t\tif(completions.length == 1) {\n\t\t\t\t// Perform completion\n\t\t\t\twords[curr] = completions[0];\n\t\t\t\tlet point = -1;\n\t\t\t\tfor(let i = 0; i <= curr; i++) {\n\t\t\t\t\tpoint += words[i].length + 1;\n\t\t\t\t}\n\t\t\t\tthis.setState({\n\t\t\t\t\tpoint: point,\n\t\t\t\t\tpromptText: words.join(\" \"),\n\t\t\t\t\targument: null,\n\t\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t\t}, this.scrollToBottom );\n\t\t\t} else if (completions.length > 1) {\n\t\t\t\t// show completions\n\t\t\t\tlet log = this.state.log;\n\t\t\t\tlog.push({\n\t\t\t\t\tlabel: this.state.currLabel,\n\t\t\t\t\tcommand: this.state.promptText,\n\t\t\t\t\tmessage: [{\n\t\t\t\t\t\ttype: \"completion\",\n\t\t\t\t\t\tvalue: [completions.join(\"\\t\")],\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrLabel: this.nextLabel(),\n\t\t\t\t\tlog: log,\n\t\t\t\t\targument: null,\n\t\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t\t}, this.scrollToBottom );\n\t\t\t}\n\t\t}\n\t}\n\t// Keyboard Macros\n\t// Miscellaneous\n\tprefixMeta = () => {\n\t\tif(this.state.lastCommand == ConsoleCommand.Search) {\n\t\t\tthis.setState({\n\t\t\t\targument: null,\n\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t});\n\t\t}\n\t\t// TODO Meta prefixed state\n\t}\n\tcancelCommand = () => {\n\t\tif(this.state.acceptInput) { // Typing command\n\t\t\tthis.child.typer.value = \"\";\n\t\t\tlet log = this.state.log;\n\t\t\tlog.push({\n\t\t\t\tlabel: this.state.currLabel,\n\t\t\t\tcommand: this.state.promptText,\n\t\t\t\tmessage: []\n\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\ttyper: \"\",\n\t\t\t\tpoint: 0,\n\t\t\t\tpromptText: \"\",\n\t\t\t\trestoreText: \"\",\n\t\t\t\tlog: log,\n\t\t\t\thistoryn: 0,\n\t\t\t\targument: null,\n\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t}, this.scrollToBottom);\n\t\t} else { // command is executing, call handler\n\t\t\tthis.props.cancel();\n\t\t}\n\t}\n\t// Helper functions\n\ttextInsert = (insert: string, text: string, replace: number = 0, point: number = text.length): string => {\n\t\treturn text.substring(0, point - replace) + insert + text.substring(point);\n\t}\n\tconsoleInsert = (insert: string, replace: number = 0): ConsoleState => {\n\t\tlet promptText = this.textInsert(insert, this.state.promptText, replace, this.state.point);\n\t\treturn {\n\t\t\tpoint: this.movePoint(insert.length - replace, insert.length - replace + this.state.promptText.length),\n\t\t\tpromptText: promptText,\n\t\t\trestoreText: promptText,\n\t\t\targument: null,\n\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t};\n\t}\n\tmovePoint = (n: number, max: number = this.state.promptText.length) => {\n\t\tlet pos = this.state.point + n;\n\t\tif (pos < 0) {\n\t\t\treturn 0;\n\t\t} if (pos > max) {\n\t\t\treturn max;\n\t\t} else {\n\t\t\treturn pos;\n\t\t}\n\t}\n\tnextWord(): number {\n\t\t// Find first alphanumeric char after first non-alphanumeric char\n\t\tlet search = /\\W\\w/.exec(this.state.promptText.substring(this.state.point));\n\t\tif(search) {\n\t\t\treturn search.index + this.state.point + 1;\n\t\t} else {\n\t\t\treturn this.state.promptText.length;\n\t\t}\n\t}\n\tpreviousWord(): number {\n\t\t// Find first non-alphanumeric char after first alphanumeric char in reverse\n\t\tlet search = /\\W\\w(?!.*\\W\\w)/.exec(this.state.promptText.substring(0,this.state.point-1));\n\t\tif(search) {\n\t\t\treturn search.index + 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\trotateRing = (n: number, ringn: number, ring: number, circular: boolean = true): number => {\n\t\tif(ring == 0) return 0;\n\t\tif(circular) {\n\t\t\treturn (ring + (ringn + n) % ring) % ring;\n\t\t} else {\n\t\t\tringn = ringn - n;\n\t\t\tif(ringn < 0) {\n\t\t\t\treturn 0;\n\t\t\t} else if (ringn >= ring) {\n\t\t\t\treturn ring;\n\t\t\t} else {\n\t\t\t\treturn ringn;\n\t\t\t}\n\t\t}\n\t}\n\trotateHistory = (n: number) => {\n\t\tlet historyn = this.rotateRing(n, this.state.historyn, this.state.history.length, false);\n\t\tif(historyn == 0) {\n\t\t\tthis.setState({\n\t\t\t\tpoint: this.state.restoreText.length,\n\t\t\t\tpromptText: this.state.restoreText,\n\t\t\t\thistoryn: historyn,\n\t\t\t\targument: null,\n\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t}, this.scrollToBottom );\n\t\t} else {\n\t\t\tlet promptText = this.state.history[this.state.history.length-historyn];\n\t\t\tthis.setState({\n\t\t\t\tpoint: promptText.length,\n\t\t\t\tpromptText: promptText,\n\t\t\t\thistoryn: historyn,\n\t\t\t\targument: null,\n\t\t\t\tlastCommand: ConsoleCommand.Default,\n\t\t\t}, this.scrollToBottom );\n\t\t}\n\t}\n\tsearchHistory = (direction: SearchDirection = this.state.searchDirection, next: boolean = false): ConsoleState => {\n\t\tlet idx = this.state.historyn;\n\t\tlet inc = (direction == SearchDirection.Reverse)?1:-1;\n\t\tif(next) {\n\t\t\tidx = idx + inc;\n\t\t}\n\t\tfor(;idx > 0 && idx <= this.state.history.length; idx = idx + inc) {\n\t\t\tlet entry = this.state.history[this.state.history.length-idx];\n\t\t\tlet point = entry.indexOf(this.state.searchText);\n\t\t\tif(point > -1) {\n\t\t\t\treturn {\n\t\t\t\t\tpoint: point,\n\t\t\t\t\tpromptText: entry,\n\t\t\t\t\tsearchDirection: direction,\n\t\t\t\t\tsearchInit: false,\n\t\t\t\t\thistoryn: idx,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tsearchDirection: direction,\n\t\t\tsearchInit: false,\n\t\t};\n\t}\n\t// DOM management\n\tscrollSemaphore = 0;\n\tscrollIfBottom = () => {\n\t\tif(this.scrollSemaphore > 0 || this.child.container.scrollTop == this.child.container.scrollHeight - this.child.container.offsetHeight) {\n\t\t\tthis.scrollSemaphore++;\n\t\t\treturn this.scrollIfBottomTrue;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tscrollIfBottomTrue = () => {\n\t\tthis.scrollToBottom();\n\t\tthis.scrollSemaphore--;\n\t}\n\tscrollToBottom = () => {\n\t\tthis.child.container.scrollTop = this.child.container.scrollHeight;\n\t\tlet rect = this.child.focus.getBoundingClientRect();\n\t\tif(rect.top < 0 || rect.left < 0 ||\n\t\t\trect.bottom > (window.innerHeight || document.documentElement.clientHeight) ||\n\t\t\trect.right > (window.innerWidth || document.documentElement.clientWidth)\n\t\t) { this.child.typer.scrollIntoView(false); }\n\t}\n\tnextLabel = () => {\n\t\tif(typeof this.props.promptLabel === \"string\") {\n\t\t\treturn this.props.promptLabel as string;\n\t\t} else {\n\t\t\treturn (this.props.promptLabel as ()=>string)();\n\t\t}\n\t}\n\trender() {\n\t\treturn <div ref={ref => this.child.container = ref}\n\t\t\t\tclassName={\"react-console-container \" + (this.state.focus?\"react-console-focus\":\"react-console-nofocus\")}\n\t\t\t\tonClick={this.focus}\n\t\t\t>\n\t\t\t{this.props.welcomeMessage?\n\t\t\t\t<div className=\"react-console-message react-console-welcome\">\n\t\t\t\t\t{this.props.welcomeMessage}\n\t\t\t\t</div>\n\t\t\t\t: null\n\t\t\t}\n\t\t\t{this.state.log.map( (val: LogEntry) => {\n\t\t\t\treturn [\n\t\t\t\t\t<ConsolePrompt label={val.label} value={val.command} />,\n\t\t\t\t\t...val.message.map( (val: LogMessage, idx: number) => {\n\t\t\t\t\t\treturn <ConsoleMessage key={idx} type={val.type} value={val.value} />;\n\t\t\t\t\t})\n\t\t\t\t];\n\t\t\t})}\n\t\t\t{this.state.acceptInput?\n\t\t\t\t<ConsolePrompt\n\t\t\t\t\tlabel={this.state.currLabel}\n\t\t\t\t\tvalue={this.state.promptText}\n\t\t\t\t\tpoint={this.state.point}\n\t\t\t\t\targument={this.state.argument}\n\t\t\t\t\t/>\n\t\t\t\t: null\n\t\t\t}\n\t\t\t<div style={{ overflow: \"hidden\", height: 1, width: 1 }}>\n\t\t\t\t<textarea\n\t\t\t\t\tref={ref => this.child.typer = ref}\n\t\t\t\t\tclassName=\"react-console-typer\"\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\tautoCorrect=\"off\"\n\t\t\t\t\tautoCapitalize=\"off\"\n\t\t\t\t\tspellCheck=\"false\"\n\t\t\t\t\tstyle={{ outline: \"none\",\n\t\t\t\t\t\tcolor: \"transparent\",\n\t\t\t\t\t\tbackgroundColor: \"transparent\",\n\t\t\t\t\t\tborder: \"none\",\n\t\t\t\t\t\tresize: \"none\",\n\t\t\t\t\t\toverflow: \"hidden\",\n\t\t\t\t\t}}\n\t\t\t\t\tonBlur={this.blur}\n\t\t\t\t\tonKeyDown={this.keyDown}\n\t\t\t\t\tonChange={this.change}\n\t\t\t\t\tonPaste={this.paste}\n\t\t\t\t></textarea>\n\t\t\t</div>\n\t\t\t<div ref={ref => this.child.focus = ref}>&nbsp;</div>\n\t\t</div>;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./react-console.tsx\n **/","module.exports = React;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}